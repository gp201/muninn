"""aa_substitutions

Revision ID: 427f9a463cec
Revises: 6a27c0af9780
Create Date: 2025-02-14 14:51:25.866122

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import CheckConstraint

from DB.enums import AminoAcid, IntEnum

# revision identifiers, used by Alembic.
revision: str = '427f9a463cec'
down_revision: Union[str, None] = '6a27c0af9780'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('amino_acid_substitutions',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('allele_id', sa.BigInteger(), nullable=False),
    sa.Column('position_aa', sa.BigInteger(), nullable=False),
    sa.Column('ref_aa', IntEnum(AminoAcid), nullable=False),
    sa.Column('alt_aa', IntEnum(AminoAcid), nullable=False),
    sa.Column('gff_feature', sa.Text(), nullable=False),
    sa.CheckConstraint("gff_feature <> ''", name=op.f('ck_amino_acid_substitutions_`gff_feature_not_empty`')),
    sa.CheckConstraint('alt_aa between 0 and 21', name=op.f('ck_amino_acid_substitutions_`alt_aa_in_range_of_enum_AminoAcid`')),
    sa.CheckConstraint('ref_aa between 0 and 21', name=op.f('ck_amino_acid_substitutions_`ref_aa_in_range_of_enum_AminoAcid`')),
    sa.ForeignKeyConstraint(['allele_id'], ['alleles.id'], name=op.f('fk_amino_acid_substitutions_allele_id_alleles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_amino_acid_substitutions')),
    sa.UniqueConstraint('allele_id', 'position_aa', 'ref_aa', 'alt_aa', 'gff_feature', name='uq_amino_acid_substitutions_aa_values', postgresql_nulls_not_distinct=True)
    )
    op.drop_column('alleles', 'ref_aa')
    op.drop_column('alleles', 'gff_feature')
    op.drop_column('alleles', 'alt_aa')
    op.drop_column('alleles', 'position_aa')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('alleles', sa.Column('position_aa', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('alleles', sa.Column('alt_aa', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('alleles', sa.Column('gff_feature', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('alleles', sa.Column('ref_aa', sa.BIGINT(), autoincrement=False, nullable=True))
    op.drop_table('amino_acid_substitutions')
    # ### end Alembic commands ###
    new_constraints = [
        AminoAcid.get_check_constraint('ref_aa'),
        AminoAcid.get_check_constraint('alt_aa'),
        CheckConstraint("gff_feature <> ''", 'ck_alleles_`gff_feature_not_empty`')
    ]

    for constraint in new_constraints:
        op.create_check_constraint(constraint.name, 'alleles', constraint.sqltext)
