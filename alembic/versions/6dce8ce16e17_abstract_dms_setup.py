"""abstract_dms_setup

Revision ID: 6dce8ce16e17
Revises: 68902446b545
Create Date: 2025-03-27 16:38:38.329319

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from DB.models import PhenotypeMetric

# revision identifiers, used by Alembic.
revision: str = '6dce8ce16e17'
down_revision: Union[str, None] = '68902446b545'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('phenotype_metrics',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('assay_type', sa.Text(), nullable=False),
    sa.CheckConstraint("assay_type <> ''", name=op.f('ck_phenotype_metrics_`assay_type_not_empty`')),
    sa.CheckConstraint("name <> ''", name=op.f('ck_phenotype_metrics_`name_not_empty`')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_phenotype_metrics')),
    sa.UniqueConstraint('name', name='uq_phenotype_metrics_name')
    )
    op.create_table('phenotype_measurement_results',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('phenotype_metric_id', sa.BigInteger(), nullable=False),
    sa.Column('amino_acid_substitution_id', sa.BigInteger(), nullable=False),
    sa.Column('value', sa.Double(), nullable=False),
    sa.ForeignKeyConstraint(['amino_acid_substitution_id'], ['amino_acid_substitutions.id'], name=op.f('fk_phenotype_measurement_results_amino_acid_substitution_id_amino_acid_substitutions')),
    sa.ForeignKeyConstraint(['phenotype_metric_id'], ['phenotype_metrics.id'], name=op.f('fk_phenotype_measurement_results_phenotype_metric_id_phenotype_metrics')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_phenotype_measurement_results')),
    sa.UniqueConstraint('phenotype_metric_id', 'amino_acid_substitution_id', name='uq_phenotype_measurement_results_metric_and_amino_sub')
    )
    op.drop_table('dms_results')

    for model in [PhenotypeMetric]:
        for name, table, sqltext in model.get_check_constraints_for_alembic():
            op.execute(f'ALTER TABLE {table} DROP CONSTRAINT IF EXISTS "{name}"')
            op.create_check_constraint(name, table, sqltext)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dms_results',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('ferret_sera_escape', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('stability', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('allele_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('SA26_usage_increase', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('entry_293T', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['allele_id'], ['alleles.id'], name='fk_dms_results_allele_id_alleles'),
    sa.PrimaryKeyConstraint('id', name='pk_dms_results'),
    sa.UniqueConstraint('allele_id', name='uq_dms_results_allele_id')
    )
    op.drop_table('phenotype_measurement_results')
    op.drop_table('phenotype_metrics')
    # ### end Alembic commands ###
